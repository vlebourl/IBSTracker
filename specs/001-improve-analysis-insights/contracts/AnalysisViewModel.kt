/**
 * Contract: Analysis ViewModel Interface
 * 
 * Purpose: Defines the contract for Analysis screen state management and user interactions
 * Author: Generated by /speckit.plan
 * Date: 2025-10-26
 */

package com.tiarkaerell.ibstracker.ui.viewmodel

import androidx.lifecycle.ViewModel
import com.tiarkaerell.ibstracker.data.model.*
import kotlinx.coroutines.flow.StateFlow
import java.time.LocalDate

/**
 * ViewModel contract for the Analysis screen
 * 
 * Manages analysis state, user interactions, and data filtering
 * for the improved symptom-trigger correlation display.
 */
abstract class AnalysisViewModel : ViewModel() {
    
    // State properties
    abstract val uiState: StateFlow<AnalysisUiState>
    abstract val analysisResult: StateFlow<AnalysisResult?>
    abstract val filters: StateFlow<AnalysisFilters>
    abstract val isLoading: StateFlow<Boolean>
    abstract val errorMessage: StateFlow<String?>
    
    // User interaction methods
    
    /**
     * Load analysis for the current time window and filters
     */
    abstract fun loadAnalysis()
    
    /**
     * Refresh analysis data by invalidating cache and recalculating
     */
    abstract fun refreshAnalysis()
    
    /**
     * Update the analysis time window
     * 
     * @param startDate Start of analysis period
     * @param endDate End of analysis period
     */
    abstract fun updateTimeWindow(startDate: LocalDate, endDate: LocalDate)
    
    /**
     * Apply quick date range filter
     * 
     * @param range Predefined date range option
     */
    abstract fun applyDateRange(range: DateRange)
    
    /**
     * Update severity filter threshold
     * 
     * @param minSeverity Minimum symptom severity to include (1-10)
     */
    abstract fun updateSeverityFilter(minSeverity: Int?)
    
    /**
     * Toggle specific symptom type in filter
     * 
     * @param symptomType Symptom type to include/exclude
     */
    abstract fun toggleSymptomFilter(symptomType: String)
    
    /**
     * Toggle specific food category in filter
     * 
     * @param category Food category to include/exclude
     */
    abstract fun toggleFoodCategoryFilter(category: FoodCategory)
    
    /**
     * Add food to exclusion list
     * 
     * @param foodName Food to exclude from analysis
     */
    abstract fun excludeFood(foodName: String)
    
    /**
     * Remove food from exclusion list
     * 
     * @param foodName Food to include in analysis
     */
    abstract fun includeFood(foodName: String)
    
    /**
     * Update minimum confidence threshold
     * 
     * @param threshold Minimum confidence to show results (0.0-1.0)
     */
    abstract fun updateConfidenceThreshold(threshold: Double)
    
    /**
     * Clear all active filters
     */
    abstract fun clearAllFilters()
    
    /**
     * Toggle expanded state for symptom card
     * 
     * @param symptomId ID of symptom to expand/collapse
     */
    abstract fun toggleSymptomExpansion(symptomId: String)
    
    /**
     * Get detailed information for a specific trigger
     * 
     * @param triggerId ID of trigger to examine
     */
    abstract fun getTriggerDetails(triggerId: String): TriggerDetails?
    
    /**
     * Update food categorization
     * 
     * @param foodName Food to recategorize
     * @param newCategory New category assignment
     */
    abstract fun updateFoodCategory(foodName: String, newCategory: FoodCategory)
    
    /**
     * Generate and share analysis summary
     * 
     * @return Formatted analysis summary for sharing
     */
    abstract fun generateAnalysisSummary(): String
    
    /**
     * Clear error message
     */
    abstract fun clearError()
    
    /**
     * Handle analysis parameter validation
     * 
     * @return Validation result with any issues
     */
    abstract fun validateCurrentParameters(): ValidationResult
}

/**
 * UI state for the Analysis screen
 */
data class AnalysisUiState(
    val isInitialized: Boolean = false,
    val isLoading: Boolean = false,
    val hasData: Boolean = false,
    val expandedSymptoms: Set<String> = emptySet(),
    val selectedTab: AnalysisTab = AnalysisTab.SYMPTOMS,
    val showFilterDialog: Boolean = false,
    val showDatePicker: Boolean = false,
    val showCategoryDialog: Boolean = false,
    val errorMessage: String? = null,
    val lastRefreshTime: String? = null,
    val validationIssues: List<String> = emptyList()
)

/**
 * Analysis screen tabs
 */
enum class AnalysisTab(val displayName: String) {
    SYMPTOMS("Symptoms"),
    PATTERNS("Patterns"),
    INSIGHTS("Insights")
}

/**
 * Predefined date range options
 */
enum class DateRange(
    val displayName: String,
    val days: Int?
) {
    LAST_7_DAYS("Last 7 days", 7),
    LAST_30_DAYS("Last 30 days", 30),
    LAST_90_DAYS("Last 90 days", 90),
    CUSTOM("Custom range", null),
    ALL("All time", null)
}

/**
 * Detailed trigger information
 */
data class TriggerDetails(
    val triggerProbability: TriggerProbability,
    val recentCorrelations: List<CorrelationEvidence>,
    val relatedPatterns: List<SymptomPattern>,
    val recommendations: List<String>,
    val statisticalSummary: StatisticalSummary
)

/**
 * Statistical summary for trigger analysis
 */
data class StatisticalSummary(
    val totalOccurrences: Int,
    val averageTimeLag: String,
    val confidenceLevel: String,
    val strengthCategory: String,
    val reliabilityNotes: List<String>
)

/**
 * Filter change events
 */
sealed class FilterEvent {
    data class DateRangeChanged(val range: DateRange) : FilterEvent()
    data class SeverityChanged(val minSeverity: Int?) : FilterEvent()
    data class SymptomToggled(val symptomType: String) : FilterEvent()
    data class CategoryToggled(val category: FoodCategory) : FilterEvent()
    data class FoodExcluded(val foodName: String) : FilterEvent()
    data class FoodIncluded(val foodName: String) : FilterEvent()
    data class ConfidenceChanged(val threshold: Double) : FilterEvent()
    object FiltersCleared : FilterEvent()
}

/**
 * Analysis action events
 */
sealed class AnalysisAction {
    object Refresh : AnalysisAction()
    object LoadData : AnalysisAction()
    data class SymptomExpanded(val symptomId: String) : AnalysisAction()
    data class TriggerSelected(val triggerId: String) : AnalysisAction()
    data class TabChanged(val tab: AnalysisTab) : AnalysisAction()
    data class FoodRecategorized(val foodName: String, val category: FoodCategory) : AnalysisAction()
    object ShareAnalysis : AnalysisAction()
    object ClearError : AnalysisAction()
}