/**
 * Contract: Analysis Repository Interface
 * 
 * Purpose: Defines the contract for correlation analysis data operations
 * Author: Generated by /speckit.plan
 * Date: 2025-10-26
 */

package com.tiarkaerell.ibstracker.data.repository

import com.tiarkaerell.ibstracker.data.model.*
import kotlinx.coroutines.flow.Flow
import java.time.Instant
import java.time.LocalDate

/**
 * Repository interface for symptom-trigger correlation analysis
 * 
 * Handles calculation, caching, and retrieval of analysis results
 * with support for customizable time windows and filtering.
 */
interface AnalysisRepository {
    
    /**
     * Generate a complete analysis for the specified time period and filters
     * 
     * @param timeWindow Time period to analyze
     * @param filters User-selected analysis parameters
     * @return Complete analysis results with trigger probabilities
     * 
     * @throws IllegalArgumentException if timeWindow is invalid
     * @throws AnalysisException if insufficient data for analysis
     */
    suspend fun generateAnalysis(
        timeWindow: AnalysisTimeWindow,
        filters: AnalysisFilters = AnalysisFilters()
    ): AnalysisResult
    
    /**
     * Retrieve cached analysis results if available and valid
     * 
     * @param timeWindow Time period requested
     * @param filters Analysis parameters
     * @return Cached results or null if not available/invalid
     */
    suspend fun getCachedAnalysis(
        timeWindow: AnalysisTimeWindow,
        filters: AnalysisFilters = AnalysisFilters()
    ): AnalysisResult?
    
    /**
     * Invalidate cached analyses affected by data changes
     * 
     * @param since Timestamp after which data changed
     */
    suspend fun invalidateCache(since: Instant)
    
    /**
     * Observe analysis results for reactive UI updates
     * 
     * @return Flow of current analysis results
     */
    fun observeAnalysisResults(): Flow<AnalysisResult?>
    
    /**
     * Calculate trigger probabilities for a specific symptom
     * 
     * @param symptomType Type of symptom to analyze
     * @param timeWindow Analysis time period
     * @param filters Optional filters
     * @return List of trigger probabilities sorted by strength
     */
    suspend fun calculateTriggerProbabilities(
        symptomType: String,
        timeWindow: AnalysisTimeWindow,
        filters: AnalysisFilters = AnalysisFilters()
    ): List<TriggerProbability>
    
    /**
     * Get food groupings for categorization
     * 
     * @return Current food-to-category mappings
     */
    suspend fun getFoodGroupings(): List<FoodGrouping>
    
    /**
     * Update food categorization
     * 
     * @param foodName Name of food to categorize
     * @param category Target category
     * @param userConfirmed Whether user manually set this
     */
    suspend fun updateFoodGrouping(
        foodName: String,
        category: FoodCategory,
        userConfirmed: Boolean = false
    )
    
    /**
     * Get analysis insights in plain language
     * 
     * @param analysisResult Results to generate insights for
     * @return List of user-friendly insight strings
     */
    suspend fun generateInsights(analysisResult: AnalysisResult): List<String>
    
    /**
     * Validate analysis parameters
     * 
     * @param timeWindow Time period to validate
     * @param filters Filters to validate
     * @return Validation result with any issues
     */
    suspend fun validateAnalysisParameters(
        timeWindow: AnalysisTimeWindow,
        filters: AnalysisFilters
    ): ValidationResult
}

/**
 * Result of parameter validation
 */
data class ValidationResult(
    val isValid: Boolean,
    val errors: List<String> = emptyList(),
    val warnings: List<String> = emptyList()
)

/**
 * Exception thrown during analysis calculation
 */
class AnalysisException(
    message: String,
    cause: Throwable? = null
) : Exception(message, cause)

/**
 * Analysis configuration constants
 */
object AnalysisConfig {
    const val DEFAULT_TIME_WINDOW_HOURS = 8
    const val MIN_OCCURRENCES_FOR_ANALYSIS = 3
    const val MIN_OBSERVATION_DAYS = 14
    const val MAX_ANALYSIS_PERIOD_DAYS = 365
    const val CACHE_VALIDITY_HOURS = 24
    
    // Probability calculation weights
    const val TEMPORAL_WEIGHT = 0.4
    const val BASELINE_WEIGHT = 0.3
    const val FREQUENCY_WEIGHT = 0.3
    
    // Confidence thresholds
    const val HIGH_CONFIDENCE_THRESHOLD = 0.8
    const val MEDIUM_CONFIDENCE_THRESHOLD = 0.6
    const val LOW_CONFIDENCE_THRESHOLD = 0.4
    
    // Display thresholds
    const val MIN_PROBABILITY_TO_SHOW = 0.1
    const val MAX_TRIGGERS_TO_DISPLAY = 10
}