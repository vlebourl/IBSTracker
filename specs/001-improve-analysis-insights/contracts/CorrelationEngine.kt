/**
 * Contract: Correlation Calculation Engine Interface
 * 
 * Purpose: Defines the contract for food-symptom correlation analysis algorithms
 * Author: Generated by /speckit.plan
 * Date: 2025-10-26
 */

package com.tiarkaerell.ibstracker.data.analysis

import com.tiarkaerell.ibstracker.data.model.*
import java.time.Duration
import java.time.Instant

/**
 * Core correlation calculation engine
 * 
 * Implements weighted correlation algorithms combining temporal proximity,
 * baseline trigger probabilities, and historical frequency patterns.
 */
interface CorrelationEngine {
    
    /**
     * Calculate weighted correlation score for a food-symptom pair
     * 
     * @param foodName Name of the food item
     * @param foodCategory Category classification of the food
     * @param foodOccurrences List of times this food was consumed
     * @param symptomOccurrences List of symptom occurrences
     * @param timeWindow Maximum time between food and symptom to consider
     * @return Detailed correlation calculation result
     */
    suspend fun calculateCorrelation(
        foodName: String,
        foodCategory: FoodCategory,
        foodOccurrences: List<FoodOccurrence>,
        symptomOccurrences: List<SymptomOccurrence>,
        timeWindow: Duration = Duration.ofHours(8)
    ): CorrelationCalculation
    
    /**
     * Calculate temporal proximity weight using exponential decay
     * 
     * @param timeLag Duration between food consumption and symptom
     * @return Weight value between 0.0 and 1.0
     */
    fun calculateTemporalWeight(timeLag: Duration): Double
    
    /**
     * Get baseline trigger probability for a food category
     * 
     * @param category Food category
     * @return Baseline probability (0.0 to 1.0) based on IBS research
     */
    fun getBaselineTriggerProbability(category: FoodCategory): Double
    
    /**
     * Calculate frequency-based correlation score
     * 
     * @param coOccurrences Number of times food preceded symptom
     * @param totalSymptomOccurrences Total symptom events in period
     * @param totalFoodOccurrences Total times food was consumed
     * @return Frequency correlation score (0.0 to 1.0)
     */
    fun calculateFrequencyScore(
        coOccurrences: Int,
        totalSymptomOccurrences: Int,
        totalFoodOccurrences: Int
    ): Double
    
    /**
     * Apply intensity weighting to correlation score
     * 
     * @param baseScore Base correlation score
     * @param averageSymptomIntensity Average intensity of associated symptoms
     * @param maxIntensity Maximum possible intensity (typically 10)
     * @return Intensity-adjusted score
     */
    fun applyIntensityWeighting(
        baseScore: Double,
        averageSymptomIntensity: Double,
        maxIntensity: Int = 10
    ): Double
    
    /**
     * Calculate statistical confidence for a correlation
     * 
     * @param occurrenceCount Number of co-occurrences
     * @param observationPeriodDays Total days of data
     * @param correlationScore Calculated correlation score
     * @return Confidence level (0.0 to 1.0)
     */
    fun calculateConfidence(
        occurrenceCount: Int,
        observationPeriodDays: Int,
        correlationScore: Double
    ): Double
    
    /**
     * Determine recommendation level based on correlation data
     * 
     * @param correlation Complete correlation calculation
     * @return Appropriate recommendation level
     */
    fun determineRecommendationLevel(correlation: CorrelationCalculation): RecommendationLevel
}

/**
 * Food grouping and categorization engine
 */
interface FoodGroupingEngine {
    
    /**
     * Automatically categorize a food item
     * 
     * @param foodName Name of the food to categorize
     * @return Most likely food category with confidence
     */
    suspend fun categorizeFood(foodName: String): FoodCategorization
    
    /**
     * Group similar food items together
     * 
     * @param foodNames List of food names to group
     * @param similarityThreshold Minimum similarity to group (0.0 to 1.0)
     * @return List of food groups with similar items
     */
    suspend fun groupSimilarFoods(
        foodNames: List<String>,
        similarityThreshold: Double = 0.7
    ): List<FoodGroup>
    
    /**
     * Calculate string similarity between two food names
     * 
     * @param food1 First food name
     * @param food2 Second food name
     * @return Similarity score (0.0 to 1.0)
     */
    fun calculateFoodSimilarity(food1: String, food2: String): Double
    
    /**
     * Normalize food name for consistent matching
     * 
     * @param foodName Raw food name input
     * @return Cleaned, standardized food name
     */
    fun normalizeFoodName(foodName: String): String
    
    /**
     * Get category keywords for classification
     * 
     * @param category Food category
     * @return List of keywords associated with category
     */
    fun getCategoryKeywords(category: FoodCategory): List<String>
}

/**
 * Pattern detection engine for recurring correlations
 */
interface PatternDetectionEngine {
    
    /**
     * Detect recurring patterns in symptom-trigger relationships
     * 
     * @param analysisResult Complete analysis results
     * @return List of detected patterns
     */
    suspend fun detectPatterns(analysisResult: AnalysisResult): List<SymptomPattern>
    
    /**
     * Find combination triggers (multiple foods together)
     * 
     * @param symptomOccurrences Symptom events to analyze
     * @param foodOccurrences Food consumption events
     * @param timeWindow Time window for correlation
     * @return List of food combinations that trigger symptoms
     */
    suspend fun findCombinationTriggers(
        symptomOccurrences: List<SymptomOccurrence>,
        foodOccurrences: List<FoodOccurrence>,
        timeWindow: Duration
    ): List<FoodCombination>
    
    /**
     * Detect dosage-dependent patterns
     * 
     * @param triggerProbability Trigger to analyze for dosage effects
     * @param foodOccurrences All occurrences of this food
     * @param symptomOccurrences Related symptom occurrences
     * @return Dosage pattern if detected, null otherwise
     */
    suspend fun detectDosagePattern(
        triggerProbability: TriggerProbability,
        foodOccurrences: List<FoodOccurrence>,
        symptomOccurrences: List<SymptomOccurrence>
    ): DosagePattern?
    
    /**
     * Find time-of-day patterns
     * 
     * @param correlations List of correlations to analyze
     * @return Time-based patterns if any detected
     */
    suspend fun detectTimePatterns(correlations: List<CorrelationEvidence>): List<TimePattern>
}

/**
 * Insight generation engine for plain-language explanations
 */
interface InsightEngine {
    
    /**
     * Generate user-friendly insights from analysis results
     * 
     * @param analysisResult Complete analysis to generate insights for
     * @return List of plain-language insight strings
     */
    suspend fun generateInsights(analysisResult: AnalysisResult): List<String>
    
    /**
     * Create summary text for a specific symptom
     * 
     * @param symptomAnalysis Single symptom analysis results
     * @return Human-readable summary
     */
    fun createSymptomSummary(symptomAnalysis: SymptomAnalysis): String
    
    /**
     * Generate recommendations based on trigger probabilities
     * 
     * @param triggers List of trigger probabilities
     * @return List of actionable recommendations
     */
    fun generateRecommendations(triggers: List<TriggerProbability>): List<String>
    
    /**
     * Create pattern descriptions in natural language
     * 
     * @param pattern Detected pattern to describe
     * @return Human-readable pattern description
     */
    fun describePattern(pattern: SymptomPattern): String
    
    /**
     * Format statistical information for user consumption
     * 
     * @param correlation Correlation data to format
     * @return User-friendly statistical summary
     */
    fun formatStatistics(correlation: CorrelationCalculation): String
}

// Supporting data classes

/**
 * Complete correlation calculation result
 */
data class CorrelationCalculation(
    val foodName: String,
    val foodCategory: FoodCategory,
    val temporalScore: Double,
    val baselineScore: Double,
    val frequencyScore: Double,
    val combinedScore: Double,
    val confidence: Double,
    val occurrenceCount: Int,
    val coOccurrences: List<CorrelationEvidence>,
    val averageTimeLag: Duration,
    val intensityMultiplier: Double,
    val statisticalSummary: Map<String, Any>
)

/**
 * Food categorization result
 */
data class FoodCategorization(
    val foodName: String,
    val category: FoodCategory,
    val confidence: Double,
    val matchedKeywords: List<String>,
    val similaritySource: String? = null
)

/**
 * Group of similar foods
 */
data class FoodGroup(
    val representativeName: String,
    val foods: List<String>,
    val category: FoodCategory,
    val averageSimilarity: Double
)

/**
 * Food combination trigger
 */
data class FoodCombination(
    val foods: List<String>,
    val combinationScore: Double,
    val occurrenceCount: Int,
    val confidence: Double
)

/**
 * Dosage-dependent pattern
 */
data class DosagePattern(
    val foodName: String,
    val lowDoseThreshold: String,
    val highDoseThreshold: String,
    val correlationByDose: Map<String, Double>, // dose level -> correlation
    val confidence: Double
)

/**
 * Time-based pattern
 */
data class TimePattern(
    val patternType: TimePatternType,
    val description: String,
    val strength: Double,
    val timeFrames: List<String>
)

enum class TimePatternType {
    TIME_OF_DAY,
    DAY_OF_WEEK,
    MEAL_TIMING,
    CUMULATIVE_EFFECT
}

/**
 * Food and symptom occurrence data structures
 */
data class FoodOccurrence(
    val timestamp: Instant,
    val foodName: String,
    val quantity: String?,
    val category: FoodCategory
)

data class SymptomOccurrence(
    val timestamp: Instant,
    val symptomType: String,
    val intensity: Int,
    val duration: Duration?
)